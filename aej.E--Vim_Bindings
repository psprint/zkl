"
" F1-F12
"
nnoremap    <F12>    :make<CR>
inoremap    <F12>    <C-O>:make<CR>
nnoremap    <F11>    :cnext<CR>
inoremap    <F11>    <C-O>:cnext<CR>
nnoremap    <silent> <F8> :call SG_ToggleMouse()<CR>
inoremap    <silent> <F8> <C-O>:call SG_ToggleMouse()<CR>
set pastetoggle=<F7>
nmap        <F4>     a<C-R>=strftime("%Y-%m-%d %a %H:%M")<CR><Esc>
imap        <F4>     <C-R>=strftime("%Y-%m-%d %a %H:%M")<CR>
nnoremap    <F3>     <C-W><C-S>:Ex<CR>
inoremap    <F3>     <ESC><C-W><C-S>:Ex<CR>
nnoremap    <F2>     <C-W>w
inoremap    <F2>     <ESC><C-W>w
nnoremap    <F1>     :hide<CR>
inoremap    <F1>     <ESC>:hide<CR>

" vim7 tabs
if version >= 700
    noremap L :tabn<CR>
    noremap H :tabp<CR>
endif

" SHIFT-INSERT {{{1
if 0 && has("gui_running")
    set mousehide
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>
else
    map <S-Insert> <RightMouse>
    map! <S-Insert> <RightMouse>
endif " 1}}}

" Fine grained undo
inoremap <Space> <Space><C-g>u
inoremap <Tab> <Tab><C-g>u
inoremap <Return> <Return><C-g>u

" provide hjkl movements in Insert mode via the <Alt> modifier key
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l

" Also b and w normal commands
inoremap <A-b> <C-o>b 
inoremap <A-w> <C-o>w

" provide hjkl movements in Command-line mode via the <Alt> modifier key
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

" Also b and w normal commands
cnoremap <expr> <A-b> &cedit. 'b' .'<C-c>'
cnoremap <expr> <A-w> &cedit. 'w' .'<C-c>'

" Insert the rest of the line below the cursor.
" Mnemonic: Elevate characters from below line
inoremap <A-e> 
    \<Esc>
    \jl
        \y$
    \hk
        \p
        \a

" Insert the rest of the line above the cursor.
" Mnemonic:  Y depicts a funnel, through which the above line's characters pour onto the current line.
inoremap <A-y> 
    \<Esc>
    \kl
        \y$
    \hj
        \p
        \a

" ggvG
nnoremap <Leader>'wc ggvG$"+y
nnoremap <Leader>'wC ggvG$"*y
nnoremap <Leader>'wv ggvG$"+p
nnoremap <Leader>'wV ggvG$"*p

" other.vim
map <Leader>'o <Plug>OtherFile

" %s <C-R>", <C-R><C-W> {{{1
nnoremap <Leader>'z :%s/\<<C-R><C-W>\>/
inoremap <Leader>'z <ESC>:%s/\<<C-R><C-W>\>/

nnoremap <silent> <Leader>'Z :call SG_BeginSubstituteCommandFromVisualMode()<CR>v
inoremap <silent> <Leader>'Z <ESC>:call SG_BeginSubstituteCommandFromVisualMode()<CR>v
vnoremap <silent> <Leader>'Z <ESC>:call SG_BeginSubstituteCommandFromVisualMode()<CR>vgv
function! SG_BeginSubstituteCommandFromVisualMode()
    vnoremap <buffer> y y<CR>:unmap <buffer> y<CR>:%s/<C-R>"/
endfunction
" 1}}}
" vim:ft=vim
